# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
                    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
                    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
                    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
                    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                            },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    emails: 'EmailCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

UserWhereUniqueInput = _UserWhereUnique_id_Input


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: Optional[_str]
    password: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    emails: 'EmailUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: Optional[_str]
    password: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_password_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    emails: Union[bool, 'FindManyEmailArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    emails: Union[bool, 'FindManyEmailArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    emails: Union[bool, 'FindManyEmailArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    emails: Union[bool, 'FindManyEmailArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    emails: Union[bool, 'FindManyEmailArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class EmailIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    sentMessages: Union[bool, 'FindManyMessageArgsFromUserRecursive1']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromUserRecursive1']


class EmailIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    sentMessages: Union[bool, 'FindManyMessageArgsFromUserRecursive2']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromUserRecursive2']


class EmailIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    sentMessages: Union[bool, 'FindManyMessageArgsFromUserRecursive3']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromUserRecursive3']


class EmailIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    sentMessages: Union[bool, 'FindManyMessageArgsFromUserRecursive4']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromUserRecursive4']


class EmailIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class EmailArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'EmailIncludeFromEmailRecursive1'


class EmailArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'EmailIncludeFromEmailRecursive2'


class EmailArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'EmailIncludeFromEmailRecursive3'


class EmailArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'EmailIncludeFromEmailRecursive4'


class EmailArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyEmailArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive1'


class FindManyEmailArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive2'


class FindManyEmailArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive3'


class FindManyEmailArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive4'


class FindManyEmailArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    
    

class MessageIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    fromEmail: Union[bool, 'EmailArgsFromUserRecursive1']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromUserRecursive1']


class MessageIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    fromEmail: Union[bool, 'EmailArgsFromUserRecursive2']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromUserRecursive2']


class MessageIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    fromEmail: Union[bool, 'EmailArgsFromUserRecursive3']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromUserRecursive3']


class MessageIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    fromEmail: Union[bool, 'EmailArgsFromUserRecursive4']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromUserRecursive4']


class MessageIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageRecipientIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive1']
    email: Union[bool, 'EmailArgsFromUserRecursive1']


class MessageRecipientIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive2']
    email: Union[bool, 'EmailArgsFromUserRecursive2']


class MessageRecipientIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive3']
    email: Union[bool, 'EmailArgsFromUserRecursive3']


class MessageRecipientIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive4']
    email: Union[bool, 'EmailArgsFromUserRecursive4']


class MessageRecipientIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MessageRecipientArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive1'


class MessageRecipientArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive2'


class MessageRecipientArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive3'


class MessageRecipientArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive4'


class MessageRecipientArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMessageRecipientArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive1'


class FindManyMessageRecipientArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive2'


class FindManyMessageRecipientArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive3'


class FindManyMessageRecipientArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive4'


class FindManyMessageRecipientArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    emails: 'EmailListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    emails: 'EmailListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    emails: 'EmailListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    emails: 'EmailListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    emails: 'EmailListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    password: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    name: _str
    password: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    password: bool
    createdAt: bool
    updatedAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    password: bool
    createdAt: bool
    updatedAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'password': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'password': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'password',
    'createdAt',
    'updatedAt',
    'emails',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'password',
    'createdAt',
    'updatedAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'emails',
    ]

# Email types

class EmailOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Email create method"""
    id: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _str
    sentMessages: 'MessageCreateManyNestedWithoutRelationsInput'
    receivedMessages: 'MessageRecipientCreateManyNestedWithoutRelationsInput'


class EmailCreateInput(EmailOptionalCreateInput):
    """Required arguments to the Email create method"""
    address: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EmailOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Email create method, without relations"""
    id: _str
    userId: _str


class EmailCreateWithoutRelationsInput(EmailOptionalCreateWithoutRelationsInput):
    """Required arguments to the Email create method, without relations"""
    address: _str

class EmailConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'EmailCreateWithoutRelationsInput'
    where: 'EmailWhereUniqueInput'

class EmailCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EmailCreateWithoutRelationsInput'
    connect: 'EmailWhereUniqueInput'
    connect_or_create: 'EmailConnectOrCreateWithoutRelationsInput'


class EmailCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EmailCreateWithoutRelationsInput', List['EmailCreateWithoutRelationsInput']]
    connect: Union['EmailWhereUniqueInput', List['EmailWhereUniqueInput']]
    connect_or_create: Union['EmailConnectOrCreateWithoutRelationsInput', List['EmailConnectOrCreateWithoutRelationsInput']]

_EmailWhereUnique_id_Input = TypedDict(
    '_EmailWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_EmailWhereUnique_address_Input = TypedDict(
    '_EmailWhereUnique_address_Input',
    {
        'address': '_str',
    },
    total=True
)

EmailWhereUniqueInput = Union[
    '_EmailWhereUnique_id_Input',
    '_EmailWhereUnique_address_Input',
]


class EmailUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    address: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    sentMessages: 'MessageUpdateManyWithoutRelationsInput'
    receivedMessages: 'MessageRecipientUpdateManyWithoutRelationsInput'


class EmailUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    address: _str


class EmailUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EmailCreateWithoutRelationsInput']
    connect: List['EmailWhereUniqueInput']
    connect_or_create: List['EmailConnectOrCreateWithoutRelationsInput']
    set: List['EmailWhereUniqueInput']
    disconnect: List['EmailWhereUniqueInput']
    delete: List['EmailWhereUniqueInput']

    # TODO
    # update: List['EmailUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EmailUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EmailScalarWhereInput']
    # upsert: List['EmailUpserteWithWhereUniqueWithoutRelationsInput']


class EmailUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EmailCreateWithoutRelationsInput'
    connect: 'EmailWhereUniqueInput'
    connect_or_create: 'EmailConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EmailUpdateInput'
    # upsert: 'EmailUpsertWithoutRelationsInput'


class EmailUpsertInput(TypedDict):
    create: 'EmailCreateInput'
    update: 'EmailUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Email_id_OrderByInput = TypedDict(
    '_Email_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Email_address_OrderByInput = TypedDict(
    '_Email_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_Email_userId_OrderByInput = TypedDict(
    '_Email_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

EmailOrderByInput = Union[
    '_Email_id_OrderByInput',
    '_Email_address_OrderByInput',
    '_Email_userId_OrderByInput',
]



# recursive Email types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

EmailRelationFilter = TypedDict(
    'EmailRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class EmailListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class EmailInclude(TypedDict, total=False):
    """Email relational arguments"""
    user: Union[bool, 'UserArgsFromEmail']
    sentMessages: Union[bool, 'FindManyMessageArgsFromEmail']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromEmail']


    

class UserIncludeFromEmail(TypedDict, total=False):
    """Relational arguments for Email"""
    emails: Union[bool, 'FindManyEmailArgsFromEmailRecursive1']


class UserIncludeFromEmailRecursive1(TypedDict, total=False):
    """Relational arguments for Email"""
    emails: Union[bool, 'FindManyEmailArgsFromEmailRecursive2']


class UserIncludeFromEmailRecursive2(TypedDict, total=False):
    """Relational arguments for Email"""
    emails: Union[bool, 'FindManyEmailArgsFromEmailRecursive3']


class UserIncludeFromEmailRecursive3(TypedDict, total=False):
    """Relational arguments for Email"""
    emails: Union[bool, 'FindManyEmailArgsFromEmailRecursive4']


class UserIncludeFromEmailRecursive4(TypedDict, total=False):
    """Relational arguments for Email"""

    

class UserArgsFromEmail(TypedDict, total=False):
    """Arguments for Email"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromEmailRecursive1(TypedDict, total=False):
    """Arguments for Email"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromEmailRecursive2(TypedDict, total=False):
    """Arguments for Email"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromEmailRecursive3(TypedDict, total=False):
    """Arguments for Email"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromEmailRecursive4(TypedDict, total=False):
    """Arguments for Email"""
    
    

class FindManyUserArgsFromEmail(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromEmailRecursive1(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromEmailRecursive2(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromEmailRecursive3(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromEmailRecursive4(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class EmailIncludeFromEmail(TypedDict, total=False):
    """Relational arguments for Email"""
    user: Union[bool, 'UserArgsFromEmailRecursive1']
    sentMessages: Union[bool, 'FindManyMessageArgsFromEmailRecursive1']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromEmailRecursive1']


class EmailIncludeFromEmailRecursive1(TypedDict, total=False):
    """Relational arguments for Email"""
    user: Union[bool, 'UserArgsFromEmailRecursive2']
    sentMessages: Union[bool, 'FindManyMessageArgsFromEmailRecursive2']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromEmailRecursive2']


class EmailIncludeFromEmailRecursive2(TypedDict, total=False):
    """Relational arguments for Email"""
    user: Union[bool, 'UserArgsFromEmailRecursive3']
    sentMessages: Union[bool, 'FindManyMessageArgsFromEmailRecursive3']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromEmailRecursive3']


class EmailIncludeFromEmailRecursive3(TypedDict, total=False):
    """Relational arguments for Email"""
    user: Union[bool, 'UserArgsFromEmailRecursive4']
    sentMessages: Union[bool, 'FindManyMessageArgsFromEmailRecursive4']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromEmailRecursive4']


class EmailIncludeFromEmailRecursive4(TypedDict, total=False):
    """Relational arguments for Email"""

    

class EmailArgsFromEmail(TypedDict, total=False):
    """Arguments for Email"""
    include: 'EmailIncludeFromEmailRecursive1'


class EmailArgsFromEmailRecursive1(TypedDict, total=False):
    """Arguments for Email"""
    include: 'EmailIncludeFromEmailRecursive2'


class EmailArgsFromEmailRecursive2(TypedDict, total=False):
    """Arguments for Email"""
    include: 'EmailIncludeFromEmailRecursive3'


class EmailArgsFromEmailRecursive3(TypedDict, total=False):
    """Arguments for Email"""
    include: 'EmailIncludeFromEmailRecursive4'


class EmailArgsFromEmailRecursive4(TypedDict, total=False):
    """Arguments for Email"""
    
    

class FindManyEmailArgsFromEmail(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive1'


class FindManyEmailArgsFromEmailRecursive1(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive2'


class FindManyEmailArgsFromEmailRecursive2(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive3'


class FindManyEmailArgsFromEmailRecursive3(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive4'


class FindManyEmailArgsFromEmailRecursive4(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    
    

class MessageIncludeFromEmail(TypedDict, total=False):
    """Relational arguments for Email"""
    fromEmail: Union[bool, 'EmailArgsFromEmailRecursive1']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromEmailRecursive1']


class MessageIncludeFromEmailRecursive1(TypedDict, total=False):
    """Relational arguments for Email"""
    fromEmail: Union[bool, 'EmailArgsFromEmailRecursive2']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromEmailRecursive2']


class MessageIncludeFromEmailRecursive2(TypedDict, total=False):
    """Relational arguments for Email"""
    fromEmail: Union[bool, 'EmailArgsFromEmailRecursive3']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromEmailRecursive3']


class MessageIncludeFromEmailRecursive3(TypedDict, total=False):
    """Relational arguments for Email"""
    fromEmail: Union[bool, 'EmailArgsFromEmailRecursive4']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromEmailRecursive4']


class MessageIncludeFromEmailRecursive4(TypedDict, total=False):
    """Relational arguments for Email"""

    

class MessageArgsFromEmail(TypedDict, total=False):
    """Arguments for Email"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromEmailRecursive1(TypedDict, total=False):
    """Arguments for Email"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromEmailRecursive2(TypedDict, total=False):
    """Arguments for Email"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromEmailRecursive3(TypedDict, total=False):
    """Arguments for Email"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromEmailRecursive4(TypedDict, total=False):
    """Arguments for Email"""
    
    

class FindManyMessageArgsFromEmail(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromEmailRecursive1(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromEmailRecursive2(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromEmailRecursive3(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromEmailRecursive4(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageRecipientIncludeFromEmail(TypedDict, total=False):
    """Relational arguments for Email"""
    message: Union[bool, 'MessageArgsFromEmailRecursive1']
    email: Union[bool, 'EmailArgsFromEmailRecursive1']


class MessageRecipientIncludeFromEmailRecursive1(TypedDict, total=False):
    """Relational arguments for Email"""
    message: Union[bool, 'MessageArgsFromEmailRecursive2']
    email: Union[bool, 'EmailArgsFromEmailRecursive2']


class MessageRecipientIncludeFromEmailRecursive2(TypedDict, total=False):
    """Relational arguments for Email"""
    message: Union[bool, 'MessageArgsFromEmailRecursive3']
    email: Union[bool, 'EmailArgsFromEmailRecursive3']


class MessageRecipientIncludeFromEmailRecursive3(TypedDict, total=False):
    """Relational arguments for Email"""
    message: Union[bool, 'MessageArgsFromEmailRecursive4']
    email: Union[bool, 'EmailArgsFromEmailRecursive4']


class MessageRecipientIncludeFromEmailRecursive4(TypedDict, total=False):
    """Relational arguments for Email"""

    

class MessageRecipientArgsFromEmail(TypedDict, total=False):
    """Arguments for Email"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive1'


class MessageRecipientArgsFromEmailRecursive1(TypedDict, total=False):
    """Arguments for Email"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive2'


class MessageRecipientArgsFromEmailRecursive2(TypedDict, total=False):
    """Arguments for Email"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive3'


class MessageRecipientArgsFromEmailRecursive3(TypedDict, total=False):
    """Arguments for Email"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive4'


class MessageRecipientArgsFromEmailRecursive4(TypedDict, total=False):
    """Arguments for Email"""
    
    

class FindManyMessageRecipientArgsFromEmail(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive1'


class FindManyMessageRecipientArgsFromEmailRecursive1(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive2'


class FindManyMessageRecipientArgsFromEmailRecursive2(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive3'


class FindManyMessageRecipientArgsFromEmailRecursive3(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive4'


class FindManyMessageRecipientArgsFromEmailRecursive4(TypedDict, total=False):
    """Arguments for Email"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    


FindManyEmailArgs = FindManyEmailArgsFromEmail
FindFirstEmailArgs = FindManyEmailArgsFromEmail


    

class EmailWhereInput(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    sentMessages: 'MessageListRelationFilter'
    receivedMessages: 'MessageRecipientListRelationFilter'

    # should be noted that AND and NOT should be Union['EmailWhereInputRecursive1', List['EmailWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['EmailWhereInputRecursive1']
    OR: List['EmailWhereInputRecursive1']
    NOT: List['EmailWhereInputRecursive1']


class EmailWhereInputRecursive1(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    sentMessages: 'MessageListRelationFilter'
    receivedMessages: 'MessageRecipientListRelationFilter'

    # should be noted that AND and NOT should be Union['EmailWhereInputRecursive2', List['EmailWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['EmailWhereInputRecursive2']
    OR: List['EmailWhereInputRecursive2']
    NOT: List['EmailWhereInputRecursive2']


class EmailWhereInputRecursive2(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    sentMessages: 'MessageListRelationFilter'
    receivedMessages: 'MessageRecipientListRelationFilter'

    # should be noted that AND and NOT should be Union['EmailWhereInputRecursive3', List['EmailWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['EmailWhereInputRecursive3']
    OR: List['EmailWhereInputRecursive3']
    NOT: List['EmailWhereInputRecursive3']


class EmailWhereInputRecursive3(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    sentMessages: 'MessageListRelationFilter'
    receivedMessages: 'MessageRecipientListRelationFilter'

    # should be noted that AND and NOT should be Union['EmailWhereInputRecursive4', List['EmailWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['EmailWhereInputRecursive4']
    OR: List['EmailWhereInputRecursive4']
    NOT: List['EmailWhereInputRecursive4']


class EmailWhereInputRecursive4(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    address: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    sentMessages: 'MessageListRelationFilter'
    receivedMessages: 'MessageRecipientListRelationFilter'



# aggregate Email types


    

class EmailScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['EmailScalarWhereWithAggregatesInputRecursive1']
    OR: List['EmailScalarWhereWithAggregatesInputRecursive1']
    NOT: List['EmailScalarWhereWithAggregatesInputRecursive1']


class EmailScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['EmailScalarWhereWithAggregatesInputRecursive2']
    OR: List['EmailScalarWhereWithAggregatesInputRecursive2']
    NOT: List['EmailScalarWhereWithAggregatesInputRecursive2']


class EmailScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['EmailScalarWhereWithAggregatesInputRecursive3']
    OR: List['EmailScalarWhereWithAggregatesInputRecursive3']
    NOT: List['EmailScalarWhereWithAggregatesInputRecursive3']


class EmailScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['EmailScalarWhereWithAggregatesInputRecursive4']
    OR: List['EmailScalarWhereWithAggregatesInputRecursive4']
    NOT: List['EmailScalarWhereWithAggregatesInputRecursive4']


class EmailScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Email arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class EmailGroupByOutput(TypedDict, total=False):
    id: _str
    address: _str
    userId: _str
    _sum: 'EmailSumAggregateOutput'
    _avg: 'EmailAvgAggregateOutput'
    _min: 'EmailMinAggregateOutput'
    _max: 'EmailMaxAggregateOutput'
    _count: 'EmailCountAggregateOutput'


class EmailAvgAggregateOutput(TypedDict, total=False):
    """Email output for aggregating averages"""


class EmailSumAggregateOutput(TypedDict, total=False):
    """Email output for aggregating sums"""


class EmailScalarAggregateOutput(TypedDict, total=False):
    """Email output including scalar fields"""
    id: _str
    address: _str
    userId: _str


EmailMinAggregateOutput = EmailScalarAggregateOutput
EmailMaxAggregateOutput = EmailScalarAggregateOutput


class EmailMaxAggregateInput(TypedDict, total=False):
    """Email input for aggregating by max"""
    id: bool
    address: bool
    userId: bool


class EmailMinAggregateInput(TypedDict, total=False):
    """Email input for aggregating by min"""
    id: bool
    address: bool
    userId: bool


class EmailNumberAggregateInput(TypedDict, total=False):
    """Email input for aggregating numbers"""


EmailAvgAggregateInput = EmailNumberAggregateInput
EmailSumAggregateInput = EmailNumberAggregateInput


EmailCountAggregateInput = TypedDict(
    'EmailCountAggregateInput',
    {
        'id': bool,
        'address': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

EmailCountAggregateOutput = TypedDict(
    'EmailCountAggregateOutput',
    {
        'id': int,
        'address': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


EmailKeys = Literal[
    'id',
    'address',
    'user',
    'userId',
    'sentMessages',
    'receivedMessages',
]
EmailScalarFieldKeys = Literal[
    'id',
    'address',
    'userId',
]
EmailScalarFieldKeysT = TypeVar('EmailScalarFieldKeysT', bound=EmailScalarFieldKeys)

EmailRelationalFieldKeys = Literal[
        'user',
        'sentMessages',
        'receivedMessages',
    ]

# Message types

class MessageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Message create method"""
    id: _str
    subject: Optional[_str]
    sentAt: datetime.datetime
    fromEmail: 'EmailCreateNestedWithoutRelationsInput'
    fromId: _str
    deleted: _bool
    recipients: 'MessageRecipientCreateManyNestedWithoutRelationsInput'


class MessageCreateInput(MessageOptionalCreateInput):
    """Required arguments to the Message create method"""
    body: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MessageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Message create method, without relations"""
    id: _str
    subject: Optional[_str]
    sentAt: datetime.datetime
    fromId: _str
    deleted: _bool


class MessageCreateWithoutRelationsInput(MessageOptionalCreateWithoutRelationsInput):
    """Required arguments to the Message create method, without relations"""
    body: _str

class MessageConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MessageCreateWithoutRelationsInput'
    where: 'MessageWhereUniqueInput'

class MessageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    connect_or_create: 'MessageConnectOrCreateWithoutRelationsInput'


class MessageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MessageCreateWithoutRelationsInput', List['MessageCreateWithoutRelationsInput']]
    connect: Union['MessageWhereUniqueInput', List['MessageWhereUniqueInput']]
    connect_or_create: Union['MessageConnectOrCreateWithoutRelationsInput', List['MessageConnectOrCreateWithoutRelationsInput']]

_MessageWhereUnique_id_Input = TypedDict(
    '_MessageWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MessageWhereUniqueInput = _MessageWhereUnique_id_Input


class MessageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    subject: Optional[_str]
    body: _str
    sentAt: datetime.datetime
    fromEmail: 'EmailUpdateOneWithoutRelationsInput'
    deleted: _bool
    recipients: 'MessageRecipientUpdateManyWithoutRelationsInput'


class MessageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    subject: Optional[_str]
    body: _str
    sentAt: datetime.datetime
    deleted: _bool


class MessageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MessageCreateWithoutRelationsInput']
    connect: List['MessageWhereUniqueInput']
    connect_or_create: List['MessageConnectOrCreateWithoutRelationsInput']
    set: List['MessageWhereUniqueInput']
    disconnect: List['MessageWhereUniqueInput']
    delete: List['MessageWhereUniqueInput']

    # TODO
    # update: List['MessageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MessageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MessageScalarWhereInput']
    # upsert: List['MessageUpserteWithWhereUniqueWithoutRelationsInput']


class MessageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    connect_or_create: 'MessageConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MessageUpdateInput'
    # upsert: 'MessageUpsertWithoutRelationsInput'


class MessageUpsertInput(TypedDict):
    create: 'MessageCreateInput'
    update: 'MessageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Message_id_OrderByInput = TypedDict(
    '_Message_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Message_subject_OrderByInput = TypedDict(
    '_Message_subject_OrderByInput',
    {
        'subject': 'SortOrder',
    },
    total=True
)

_Message_body_OrderByInput = TypedDict(
    '_Message_body_OrderByInput',
    {
        'body': 'SortOrder',
    },
    total=True
)

_Message_sentAt_OrderByInput = TypedDict(
    '_Message_sentAt_OrderByInput',
    {
        'sentAt': 'SortOrder',
    },
    total=True
)

_Message_fromId_OrderByInput = TypedDict(
    '_Message_fromId_OrderByInput',
    {
        'fromId': 'SortOrder',
    },
    total=True
)

_Message_deleted_OrderByInput = TypedDict(
    '_Message_deleted_OrderByInput',
    {
        'deleted': 'SortOrder',
    },
    total=True
)

MessageOrderByInput = Union[
    '_Message_id_OrderByInput',
    '_Message_subject_OrderByInput',
    '_Message_body_OrderByInput',
    '_Message_sentAt_OrderByInput',
    '_Message_fromId_OrderByInput',
    '_Message_deleted_OrderByInput',
]



# recursive Message types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MessageRelationFilter = TypedDict(
    'MessageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MessageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MessageInclude(TypedDict, total=False):
    """Message relational arguments"""
    fromEmail: Union[bool, 'EmailArgsFromMessage']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessage']


    

class UserIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    emails: Union[bool, 'FindManyEmailArgsFromMessageRecursive1']


class UserIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    emails: Union[bool, 'FindManyEmailArgsFromMessageRecursive2']


class UserIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    emails: Union[bool, 'FindManyEmailArgsFromMessageRecursive3']


class UserIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    emails: Union[bool, 'FindManyEmailArgsFromMessageRecursive4']


class UserIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class UserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyUserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class EmailIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive1']
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecursive1']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecursive1']


class EmailIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive2']
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecursive2']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecursive2']


class EmailIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive3']
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecursive3']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecursive3']


class EmailIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    user: Union[bool, 'UserArgsFromMessageRecursive4']
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecursive4']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecursive4']


class EmailIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class EmailArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'EmailIncludeFromEmailRecursive1'


class EmailArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'EmailIncludeFromEmailRecursive2'


class EmailArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'EmailIncludeFromEmailRecursive3'


class EmailArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'EmailIncludeFromEmailRecursive4'


class EmailArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyEmailArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive1'


class FindManyEmailArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive2'


class FindManyEmailArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive3'


class FindManyEmailArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive4'


class FindManyEmailArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    
    

class MessageIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    fromEmail: Union[bool, 'EmailArgsFromMessageRecursive1']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecursive1']


class MessageIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    fromEmail: Union[bool, 'EmailArgsFromMessageRecursive2']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecursive2']


class MessageIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    fromEmail: Union[bool, 'EmailArgsFromMessageRecursive3']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecursive3']


class MessageIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    fromEmail: Union[bool, 'EmailArgsFromMessageRecursive4']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecursive4']


class MessageIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageRecipientIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive1']
    email: Union[bool, 'EmailArgsFromMessageRecursive1']


class MessageRecipientIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive2']
    email: Union[bool, 'EmailArgsFromMessageRecursive2']


class MessageRecipientIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive3']
    email: Union[bool, 'EmailArgsFromMessageRecursive3']


class MessageRecipientIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive4']
    email: Union[bool, 'EmailArgsFromMessageRecursive4']


class MessageRecipientIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MessageRecipientArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive1'


class MessageRecipientArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive2'


class MessageRecipientArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive3'


class MessageRecipientArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive4'


class MessageRecipientArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMessageRecipientArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive1'


class FindManyMessageRecipientArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive2'


class FindManyMessageRecipientArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive3'


class FindManyMessageRecipientArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive4'


class FindManyMessageRecipientArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    


FindManyMessageArgs = FindManyMessageArgsFromMessage
FindFirstMessageArgs = FindManyMessageArgsFromMessage


    

class MessageWhereInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[None, _str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromEmail: 'EmailRelationFilter'
    fromId: Union[_str, 'types.StringFilter']
    deleted: Union[_bool, 'types.BooleanFilter']
    recipients: 'MessageRecipientListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive1', List['MessageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive1']
    OR: List['MessageWhereInputRecursive1']
    NOT: List['MessageWhereInputRecursive1']


class MessageWhereInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[None, _str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromEmail: 'EmailRelationFilter'
    fromId: Union[_str, 'types.StringFilter']
    deleted: Union[_bool, 'types.BooleanFilter']
    recipients: 'MessageRecipientListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive2', List['MessageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive2']
    OR: List['MessageWhereInputRecursive2']
    NOT: List['MessageWhereInputRecursive2']


class MessageWhereInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[None, _str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromEmail: 'EmailRelationFilter'
    fromId: Union[_str, 'types.StringFilter']
    deleted: Union[_bool, 'types.BooleanFilter']
    recipients: 'MessageRecipientListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive3', List['MessageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive3']
    OR: List['MessageWhereInputRecursive3']
    NOT: List['MessageWhereInputRecursive3']


class MessageWhereInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[None, _str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromEmail: 'EmailRelationFilter'
    fromId: Union[_str, 'types.StringFilter']
    deleted: Union[_bool, 'types.BooleanFilter']
    recipients: 'MessageRecipientListRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive4', List['MessageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive4']
    OR: List['MessageWhereInputRecursive4']
    NOT: List['MessageWhereInputRecursive4']


class MessageWhereInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[None, _str, 'types.StringFilter']
    body: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    fromEmail: 'EmailRelationFilter'
    fromId: Union[_str, 'types.StringFilter']
    deleted: Union[_bool, 'types.BooleanFilter']
    recipients: 'MessageRecipientListRelationFilter'



# aggregate Message types


    

class MessageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fromId: Union[_str, 'types.StringWithAggregatesFilter']
    deleted: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive1']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive1']


class MessageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fromId: Union[_str, 'types.StringWithAggregatesFilter']
    deleted: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive2']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive2']


class MessageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fromId: Union[_str, 'types.StringWithAggregatesFilter']
    deleted: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive3']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive3']


class MessageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fromId: Union[_str, 'types.StringWithAggregatesFilter']
    deleted: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive4']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive4']


class MessageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    body: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    fromId: Union[_str, 'types.StringWithAggregatesFilter']
    deleted: Union[_bool, 'types.BooleanWithAggregatesFilter']



class MessageGroupByOutput(TypedDict, total=False):
    id: _str
    subject: _str
    body: _str
    sentAt: datetime.datetime
    fromId: _str
    deleted: _bool
    _sum: 'MessageSumAggregateOutput'
    _avg: 'MessageAvgAggregateOutput'
    _min: 'MessageMinAggregateOutput'
    _max: 'MessageMaxAggregateOutput'
    _count: 'MessageCountAggregateOutput'


class MessageAvgAggregateOutput(TypedDict, total=False):
    """Message output for aggregating averages"""


class MessageSumAggregateOutput(TypedDict, total=False):
    """Message output for aggregating sums"""


class MessageScalarAggregateOutput(TypedDict, total=False):
    """Message output including scalar fields"""
    id: _str
    subject: _str
    body: _str
    sentAt: datetime.datetime
    fromId: _str
    deleted: _bool


MessageMinAggregateOutput = MessageScalarAggregateOutput
MessageMaxAggregateOutput = MessageScalarAggregateOutput


class MessageMaxAggregateInput(TypedDict, total=False):
    """Message input for aggregating by max"""
    id: bool
    subject: bool
    body: bool
    sentAt: bool
    fromId: bool
    deleted: bool


class MessageMinAggregateInput(TypedDict, total=False):
    """Message input for aggregating by min"""
    id: bool
    subject: bool
    body: bool
    sentAt: bool
    fromId: bool
    deleted: bool


class MessageNumberAggregateInput(TypedDict, total=False):
    """Message input for aggregating numbers"""


MessageAvgAggregateInput = MessageNumberAggregateInput
MessageSumAggregateInput = MessageNumberAggregateInput


MessageCountAggregateInput = TypedDict(
    'MessageCountAggregateInput',
    {
        'id': bool,
        'subject': bool,
        'body': bool,
        'sentAt': bool,
        'fromId': bool,
        'deleted': bool,
        '_all': bool,
    },
    total=False,
)

MessageCountAggregateOutput = TypedDict(
    'MessageCountAggregateOutput',
    {
        'id': int,
        'subject': int,
        'body': int,
        'sentAt': int,
        'fromId': int,
        'deleted': int,
        '_all': int,
    },
    total=False,
)


MessageKeys = Literal[
    'id',
    'subject',
    'body',
    'sentAt',
    'fromEmail',
    'fromId',
    'deleted',
    'recipients',
]
MessageScalarFieldKeys = Literal[
    'id',
    'subject',
    'body',
    'sentAt',
    'fromId',
    'deleted',
]
MessageScalarFieldKeysT = TypeVar('MessageScalarFieldKeysT', bound=MessageScalarFieldKeys)

MessageRelationalFieldKeys = Literal[
        'fromEmail',
        'recipients',
    ]

# MessageRecipient types

class MessageRecipientOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MessageRecipient create method"""
    id: _str
    message: 'MessageCreateNestedWithoutRelationsInput'
    messageId: _str
    email: 'EmailCreateNestedWithoutRelationsInput'
    emailId: _str


class MessageRecipientCreateInput(MessageRecipientOptionalCreateInput):
    """Required arguments to the MessageRecipient create method"""
    type: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MessageRecipientOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MessageRecipient create method, without relations"""
    id: _str
    messageId: _str
    emailId: _str


class MessageRecipientCreateWithoutRelationsInput(MessageRecipientOptionalCreateWithoutRelationsInput):
    """Required arguments to the MessageRecipient create method, without relations"""
    type: _str

class MessageRecipientConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MessageRecipientCreateWithoutRelationsInput'
    where: 'MessageRecipientWhereUniqueInput'

class MessageRecipientCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageRecipientCreateWithoutRelationsInput'
    connect: 'MessageRecipientWhereUniqueInput'
    connect_or_create: 'MessageRecipientConnectOrCreateWithoutRelationsInput'


class MessageRecipientCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MessageRecipientCreateWithoutRelationsInput', List['MessageRecipientCreateWithoutRelationsInput']]
    connect: Union['MessageRecipientWhereUniqueInput', List['MessageRecipientWhereUniqueInput']]
    connect_or_create: Union['MessageRecipientConnectOrCreateWithoutRelationsInput', List['MessageRecipientConnectOrCreateWithoutRelationsInput']]

_MessageRecipientWhereUnique_id_Input = TypedDict(
    '_MessageRecipientWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MessageRecipientWhereUniqueInput = _MessageRecipientWhereUnique_id_Input


class MessageRecipientUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    message: 'MessageUpdateOneWithoutRelationsInput'
    email: 'EmailUpdateOneWithoutRelationsInput'
    type: _str


class MessageRecipientUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: _str


class MessageRecipientUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MessageRecipientCreateWithoutRelationsInput']
    connect: List['MessageRecipientWhereUniqueInput']
    connect_or_create: List['MessageRecipientConnectOrCreateWithoutRelationsInput']
    set: List['MessageRecipientWhereUniqueInput']
    disconnect: List['MessageRecipientWhereUniqueInput']
    delete: List['MessageRecipientWhereUniqueInput']

    # TODO
    # update: List['MessageRecipientUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MessageRecipientUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MessageRecipientScalarWhereInput']
    # upsert: List['MessageRecipientUpserteWithWhereUniqueWithoutRelationsInput']


class MessageRecipientUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageRecipientCreateWithoutRelationsInput'
    connect: 'MessageRecipientWhereUniqueInput'
    connect_or_create: 'MessageRecipientConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MessageRecipientUpdateInput'
    # upsert: 'MessageRecipientUpsertWithoutRelationsInput'


class MessageRecipientUpsertInput(TypedDict):
    create: 'MessageRecipientCreateInput'
    update: 'MessageRecipientUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MessageRecipient_id_OrderByInput = TypedDict(
    '_MessageRecipient_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MessageRecipient_messageId_OrderByInput = TypedDict(
    '_MessageRecipient_messageId_OrderByInput',
    {
        'messageId': 'SortOrder',
    },
    total=True
)

_MessageRecipient_emailId_OrderByInput = TypedDict(
    '_MessageRecipient_emailId_OrderByInput',
    {
        'emailId': 'SortOrder',
    },
    total=True
)

_MessageRecipient_type_OrderByInput = TypedDict(
    '_MessageRecipient_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

MessageRecipientOrderByInput = Union[
    '_MessageRecipient_id_OrderByInput',
    '_MessageRecipient_messageId_OrderByInput',
    '_MessageRecipient_emailId_OrderByInput',
    '_MessageRecipient_type_OrderByInput',
]



# recursive MessageRecipient types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MessageRecipientRelationFilter = TypedDict(
    'MessageRecipientRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MessageRecipientListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MessageRecipientInclude(TypedDict, total=False):
    """MessageRecipient relational arguments"""
    message: Union[bool, 'MessageArgsFromMessageRecipient']
    email: Union[bool, 'EmailArgsFromMessageRecipient']


    

class UserIncludeFromMessageRecipient(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    emails: Union[bool, 'FindManyEmailArgsFromMessageRecipientRecursive1']


class UserIncludeFromMessageRecipientRecursive1(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    emails: Union[bool, 'FindManyEmailArgsFromMessageRecipientRecursive2']


class UserIncludeFromMessageRecipientRecursive2(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    emails: Union[bool, 'FindManyEmailArgsFromMessageRecipientRecursive3']


class UserIncludeFromMessageRecipientRecursive3(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    emails: Union[bool, 'FindManyEmailArgsFromMessageRecipientRecursive4']


class UserIncludeFromMessageRecipientRecursive4(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""

    

class UserArgsFromMessageRecipient(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMessageRecipientRecursive1(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMessageRecipientRecursive2(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMessageRecipientRecursive3(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMessageRecipientRecursive4(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    
    

class FindManyUserArgsFromMessageRecipient(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMessageRecipientRecursive1(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMessageRecipientRecursive2(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMessageRecipientRecursive3(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMessageRecipientRecursive4(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class EmailIncludeFromMessageRecipient(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    user: Union[bool, 'UserArgsFromMessageRecipientRecursive1']
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecipientRecursive1']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecipientRecursive1']


class EmailIncludeFromMessageRecipientRecursive1(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    user: Union[bool, 'UserArgsFromMessageRecipientRecursive2']
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecipientRecursive2']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecipientRecursive2']


class EmailIncludeFromMessageRecipientRecursive2(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    user: Union[bool, 'UserArgsFromMessageRecipientRecursive3']
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecipientRecursive3']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecipientRecursive3']


class EmailIncludeFromMessageRecipientRecursive3(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    user: Union[bool, 'UserArgsFromMessageRecipientRecursive4']
    sentMessages: Union[bool, 'FindManyMessageArgsFromMessageRecipientRecursive4']
    receivedMessages: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecipientRecursive4']


class EmailIncludeFromMessageRecipientRecursive4(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""

    

class EmailArgsFromMessageRecipient(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'EmailIncludeFromEmailRecursive1'


class EmailArgsFromMessageRecipientRecursive1(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'EmailIncludeFromEmailRecursive2'


class EmailArgsFromMessageRecipientRecursive2(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'EmailIncludeFromEmailRecursive3'


class EmailArgsFromMessageRecipientRecursive3(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'EmailIncludeFromEmailRecursive4'


class EmailArgsFromMessageRecipientRecursive4(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    
    

class FindManyEmailArgsFromMessageRecipient(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive1'


class FindManyEmailArgsFromMessageRecipientRecursive1(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive2'


class FindManyEmailArgsFromMessageRecipientRecursive2(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive3'


class FindManyEmailArgsFromMessageRecipientRecursive3(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    include: 'EmailIncludeFromEmailRecursive4'


class FindManyEmailArgsFromMessageRecipientRecursive4(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['EmailOrderByInput', List['EmailOrderByInput']]
    where: 'EmailWhereInput'
    cursor: 'EmailWhereUniqueInput'
    distinct: List['EmailScalarFieldKeys']
    
    

class MessageIncludeFromMessageRecipient(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    fromEmail: Union[bool, 'EmailArgsFromMessageRecipientRecursive1']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecipientRecursive1']


class MessageIncludeFromMessageRecipientRecursive1(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    fromEmail: Union[bool, 'EmailArgsFromMessageRecipientRecursive2']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecipientRecursive2']


class MessageIncludeFromMessageRecipientRecursive2(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    fromEmail: Union[bool, 'EmailArgsFromMessageRecipientRecursive3']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecipientRecursive3']


class MessageIncludeFromMessageRecipientRecursive3(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    fromEmail: Union[bool, 'EmailArgsFromMessageRecipientRecursive4']
    recipients: Union[bool, 'FindManyMessageRecipientArgsFromMessageRecipientRecursive4']


class MessageIncludeFromMessageRecipientRecursive4(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""

    

class MessageArgsFromMessageRecipient(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMessageRecipientRecursive1(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMessageRecipientRecursive2(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMessageRecipientRecursive3(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMessageRecipientRecursive4(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    
    

class FindManyMessageArgsFromMessageRecipient(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMessageRecipientRecursive1(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMessageRecipientRecursive2(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMessageRecipientRecursive3(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMessageRecipientRecursive4(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class MessageRecipientIncludeFromMessageRecipient(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    message: Union[bool, 'MessageArgsFromMessageRecipientRecursive1']
    email: Union[bool, 'EmailArgsFromMessageRecipientRecursive1']


class MessageRecipientIncludeFromMessageRecipientRecursive1(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    message: Union[bool, 'MessageArgsFromMessageRecipientRecursive2']
    email: Union[bool, 'EmailArgsFromMessageRecipientRecursive2']


class MessageRecipientIncludeFromMessageRecipientRecursive2(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    message: Union[bool, 'MessageArgsFromMessageRecipientRecursive3']
    email: Union[bool, 'EmailArgsFromMessageRecipientRecursive3']


class MessageRecipientIncludeFromMessageRecipientRecursive3(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""
    message: Union[bool, 'MessageArgsFromMessageRecipientRecursive4']
    email: Union[bool, 'EmailArgsFromMessageRecipientRecursive4']


class MessageRecipientIncludeFromMessageRecipientRecursive4(TypedDict, total=False):
    """Relational arguments for MessageRecipient"""

    

class MessageRecipientArgsFromMessageRecipient(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive1'


class MessageRecipientArgsFromMessageRecipientRecursive1(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive2'


class MessageRecipientArgsFromMessageRecipientRecursive2(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive3'


class MessageRecipientArgsFromMessageRecipientRecursive3(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive4'


class MessageRecipientArgsFromMessageRecipientRecursive4(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    
    

class FindManyMessageRecipientArgsFromMessageRecipient(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive1'


class FindManyMessageRecipientArgsFromMessageRecipientRecursive1(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive2'


class FindManyMessageRecipientArgsFromMessageRecipientRecursive2(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive3'


class FindManyMessageRecipientArgsFromMessageRecipientRecursive3(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    include: 'MessageRecipientIncludeFromMessageRecipientRecursive4'


class FindManyMessageRecipientArgsFromMessageRecipientRecursive4(TypedDict, total=False):
    """Arguments for MessageRecipient"""
    take: int
    skip: int
    order_by: Union['MessageRecipientOrderByInput', List['MessageRecipientOrderByInput']]
    where: 'MessageRecipientWhereInput'
    cursor: 'MessageRecipientWhereUniqueInput'
    distinct: List['MessageRecipientScalarFieldKeys']
    


FindManyMessageRecipientArgs = FindManyMessageRecipientArgsFromMessageRecipient
FindFirstMessageRecipientArgs = FindManyMessageRecipientArgsFromMessageRecipient


    

class MessageRecipientWhereInput(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']
    email: 'EmailRelationFilter'
    emailId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MessageRecipientWhereInputRecursive1', List['MessageRecipientWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MessageRecipientWhereInputRecursive1']
    OR: List['MessageRecipientWhereInputRecursive1']
    NOT: List['MessageRecipientWhereInputRecursive1']


class MessageRecipientWhereInputRecursive1(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']
    email: 'EmailRelationFilter'
    emailId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MessageRecipientWhereInputRecursive2', List['MessageRecipientWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MessageRecipientWhereInputRecursive2']
    OR: List['MessageRecipientWhereInputRecursive2']
    NOT: List['MessageRecipientWhereInputRecursive2']


class MessageRecipientWhereInputRecursive2(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']
    email: 'EmailRelationFilter'
    emailId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MessageRecipientWhereInputRecursive3', List['MessageRecipientWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MessageRecipientWhereInputRecursive3']
    OR: List['MessageRecipientWhereInputRecursive3']
    NOT: List['MessageRecipientWhereInputRecursive3']


class MessageRecipientWhereInputRecursive3(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']
    email: 'EmailRelationFilter'
    emailId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MessageRecipientWhereInputRecursive4', List['MessageRecipientWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MessageRecipientWhereInputRecursive4']
    OR: List['MessageRecipientWhereInputRecursive4']
    NOT: List['MessageRecipientWhereInputRecursive4']


class MessageRecipientWhereInputRecursive4(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'
    messageId: Union[_str, 'types.StringFilter']
    email: 'EmailRelationFilter'
    emailId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']



# aggregate MessageRecipient types


    

class MessageRecipientScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']
    emailId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageRecipientScalarWhereWithAggregatesInputRecursive1']
    OR: List['MessageRecipientScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MessageRecipientScalarWhereWithAggregatesInputRecursive1']


class MessageRecipientScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']
    emailId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageRecipientScalarWhereWithAggregatesInputRecursive2']
    OR: List['MessageRecipientScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MessageRecipientScalarWhereWithAggregatesInputRecursive2']


class MessageRecipientScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']
    emailId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageRecipientScalarWhereWithAggregatesInputRecursive3']
    OR: List['MessageRecipientScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MessageRecipientScalarWhereWithAggregatesInputRecursive3']


class MessageRecipientScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']
    emailId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MessageRecipientScalarWhereWithAggregatesInputRecursive4']
    OR: List['MessageRecipientScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MessageRecipientScalarWhereWithAggregatesInputRecursive4']


class MessageRecipientScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MessageRecipient arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    messageId: Union[_str, 'types.StringWithAggregatesFilter']
    emailId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']



class MessageRecipientGroupByOutput(TypedDict, total=False):
    id: _str
    messageId: _str
    emailId: _str
    type: _str
    _sum: 'MessageRecipientSumAggregateOutput'
    _avg: 'MessageRecipientAvgAggregateOutput'
    _min: 'MessageRecipientMinAggregateOutput'
    _max: 'MessageRecipientMaxAggregateOutput'
    _count: 'MessageRecipientCountAggregateOutput'


class MessageRecipientAvgAggregateOutput(TypedDict, total=False):
    """MessageRecipient output for aggregating averages"""


class MessageRecipientSumAggregateOutput(TypedDict, total=False):
    """MessageRecipient output for aggregating sums"""


class MessageRecipientScalarAggregateOutput(TypedDict, total=False):
    """MessageRecipient output including scalar fields"""
    id: _str
    messageId: _str
    emailId: _str
    type: _str


MessageRecipientMinAggregateOutput = MessageRecipientScalarAggregateOutput
MessageRecipientMaxAggregateOutput = MessageRecipientScalarAggregateOutput


class MessageRecipientMaxAggregateInput(TypedDict, total=False):
    """MessageRecipient input for aggregating by max"""
    id: bool
    messageId: bool
    emailId: bool
    type: bool


class MessageRecipientMinAggregateInput(TypedDict, total=False):
    """MessageRecipient input for aggregating by min"""
    id: bool
    messageId: bool
    emailId: bool
    type: bool


class MessageRecipientNumberAggregateInput(TypedDict, total=False):
    """MessageRecipient input for aggregating numbers"""


MessageRecipientAvgAggregateInput = MessageRecipientNumberAggregateInput
MessageRecipientSumAggregateInput = MessageRecipientNumberAggregateInput


MessageRecipientCountAggregateInput = TypedDict(
    'MessageRecipientCountAggregateInput',
    {
        'id': bool,
        'messageId': bool,
        'emailId': bool,
        'type': bool,
        '_all': bool,
    },
    total=False,
)

MessageRecipientCountAggregateOutput = TypedDict(
    'MessageRecipientCountAggregateOutput',
    {
        'id': int,
        'messageId': int,
        'emailId': int,
        'type': int,
        '_all': int,
    },
    total=False,
)


MessageRecipientKeys = Literal[
    'id',
    'message',
    'messageId',
    'email',
    'emailId',
    'type',
]
MessageRecipientScalarFieldKeys = Literal[
    'id',
    'messageId',
    'emailId',
    'type',
]
MessageRecipientScalarFieldKeysT = TypeVar('MessageRecipientScalarFieldKeysT', bound=MessageRecipientScalarFieldKeys)

MessageRecipientRelationalFieldKeys = Literal[
        'message',
        'email',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields